<?php
namespace Adservice\TicketBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TicketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TicketRepository extends EntityRepository
{
    public function findAllOpen($user, $status, $allTickets)
    {
        foreach ($allTickets as $ticket) {
            if($ticket->getStatus() == $status) {
                $tickets[] = $ticket;
            }
        }
        return $tickets;
    }

/**
 * Encuentra los tickets segun el estado ($status) y los filtros que quieran devolver ($return)
 * @param  Entity $user     El usuario logeado actualmente
 * @param  Entity $status   El estado en que esta el ticket que se quiere devolver ('open', 'closed')
 * @param  Entity $return   El filtro de tickets que se quieran devolver ( 'all', 'accesible', 'answered', 'assigned')
 * @return array            array de tickets filtrados segun $status y $return
 */
    public function findAllTickets ($em, $user, $status, $return, $ordered=null)
    {
        $query = 'SELECT t FROM TicketBundle:Ticket t
                  WHERE t.status = '.$status->getId().'
                  ORDER BY t.modified_at '.$ordered;

        $consulta = $em->createQuery($query);

        $tickets = $consulta->getResult();

        $free_tickets           = array();  //array con los tickets pendientes de respuesta
        $assigned_tickets       = array();  //array con los tickets asignados al assessor
        $other_assessor_tickets = array();  //array con los tickets respondidos
        $answered_tickets       = array();  //array con los tickets asignados a otro assessor

        foreach ($tickets as $ticket) {

            // Se recoge el role del owner del ultimo post del ticket
            if (count($ticket->getPosts()) > 0) {
                $posts = $ticket->getPosts();
                $last_post_owner_role_name = $posts[count($ticket->getPosts())-1]->getOwner()->getRoles()[0]->getName();

                // Si el ultimo post es de un user
                if ($last_post_owner_role_name == "ROLE_USER")
                {
                    // Tickets no asignados a ningun assessor
                    if ( $ticket->getAssignedTo() == null )
                    {
                           $free_tickets[]  = $ticket;
                    }
                    else {
                        // Tickets asignados a el assessor
                        if($ticket->getAssignedTo() == $user) {
                            $assigned_tickets[] = $ticket;
                        }
                        // Tickets asignados a otro assessor
                        else {
                            $other_assessor_tickets[] = $ticket;
                        }
                    }

                // Si el ultimo post es de un assessor
                }else {
                    // Tickets asignados a el assessor
                    if($ticket->getAssignedTo() == $user) {
                        $answered_tickets[] = $ticket;
                    }
                }
            }
        }

        if ($return == 'free') {  return $free_tickets; } //array con los tickets pendientes de respuesta
        else {
            if ($return == 'assigned') { return $assigned_tickets; } //array con los tickets asignados al assessor
            else {
                if($return == 'answered') { return $answered_tickets; } //array con los tickets respondidos
                else {
                    if($return == 'other_assessor') { return $other_assessor_tickets; } //array con los tickets asignados a otro assessor
                }
            }
         }
         
//        if     ($return == 'free')           return $free_tickets;  //array con los tickets pendientes de respuesta
//        elseif ($return == 'assigned')       return $assigned_tickets;  //array con los tickets asignados al assessor
//        elseif ($return == 'answered')       return $answered_tickets;  //array con los tickets respondidos
//        elseif ($return == 'other_assessor') return $other_assessor_tickets;  //array con los tickets asignados a otro assessor
                
            
         }
         
         
         
    
    public function findAllByOwner ($user, $status)
    {
        $tickets = $this->findBy(array('owner' => $user->getId(),
                                       'status' => $status->getId()));
        return $tickets;
    }

    public function findAllByWorkshop ($user, $status)
    {
        $tickets = $this->findBy(array('workshop' => $user->getWorkshop()->getId(),
                                       'status' => $status->getId()));
        return $tickets;
    }

    public function findTicketsFiltered($security, $id_workshop, $id_ticket=null, $status=null)
    {
        $em     = $this->getEntityManager();

        $query  = 'SELECT t FROM TicketBundle:Ticket t ';
        $joins  = 'JOIN t.workshop w ';
        $where  = 'WHERE w.id = :w_id ';

        $params[] = array('w_id', $id_workshop);

        if ($id_ticket != null)
        {
            $where .= 'AND t.id = :id_ticket ';
            $params[] = array('id_ticket', $id_ticket);
        }

        if ($status != null and $status->getId() != null)
        {
            $where .= 'AND t.status = :status ';
            $params[] = array('status', $status->getId());
        }

        //Crea la consulta
        $consulta = $em->createQuery($query.$joins.$where.'ORDER BY t.id ');

        //hace un recorrido de $params para extraer los parametros de la consulta
        foreach($params as $param){
            $consulta->setParameter($param[0], $param[1]);
        }

        return $consulta->getResult();
    }

    public function findSimilar($status, $model=null, $subsystem=null)
    {
        $em = $this->getEntityManager();

        $query    = 'SELECT t FROM TicketBundle:Ticket t ';
        $joins    = ' ';
        $where    = 'WHERE t.status = :status ';
        $params[] = array('status', $status);

        if ($model != null)
        {
            $joins  = 'JOIN t.car c ';
            $where .= 'AND c.model = :model ';
            $params[] = array('model', $model->getId());
        }

        if ($subsystem != null)
        {
            $where .= 'AND t.subsystem = :subsystem ';
            $params[] = array('subsystem', $subsystem->getId());
        }

        //Crea la consulta
        $consulta = $em->createQuery($query.$joins.$where.'ORDER BY t.id ');

        //hace un recorrido de $params para extraer los parametros de la consulta
        foreach($params as $param){
            $consulta->setParameter($param[0], $param[1]);
        }

        return $consulta->getResult();
    }
}

<?php
namespace Adservice\TicketBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TicketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TicketRepository extends EntityRepository
{
    public function findAllOpen($user, $status, $allTickets)
    {
        foreach ($allTickets as $ticket) {
            if($ticket->getStatus() == $status) {
                $tickets[] = $ticket;
            }
        }
        return $tickets;
    }

    // public function findAllAssigned ($user, $status, $bool)
    // {
    //     ($bool == 0) ? $assigned = $user->getId() : $assigned = null;

    //     $tickets = $this->findBy(array('status' => $status->getId(),
    //                                    'assigned_to' => $assigned));
    //     return $tickets;
    // }

/**
 * Encuentra los tickets segun el estado ($status) y los filtros que quieran devolver ($return)
 * @param  Entity $user     El usuario logeado actualmente
 * @param  Entity $status   El estado en que esta el ticket que se quiere devolver ('open', 'closed')
 * @param  Entity $return   El filtro de tickets que se quieran devolver ( 'all', 'accesible', 'answered', 'assigned')
 * @return array            array de tickets filtrados segun $status y $return
 */
    public function findAllTickets ($user, $status, $return)
    {
        $tickets = $this->findByStatus($status->getId());
        // $tickets = $this->findBy(array('status' => $status->getId()));

        foreach ($tickets as $ticket) {

            // Se recoge el role del owner del ultimo post del ticket
            $posts = $ticket->getPosts();
            $last_post = $posts[count($ticket->getPosts())-1];
            $last_post_owner_roles = $last_post->getOwner()->getRoles();
            $last_post_owner_role_name = $last_post_owner_roles[0]->getName();

            // Si el ultimo post es de un user
            if ($last_post_owner_role_name == "ROLE_USER")
            {
                // Si el ticket no esta asignado a ningun otro assessor
                if ( $ticket->getAssignedTo() == null
                  or $ticket->getAssignedTo() == $user )
                {
                       $accesible_tickets[]  = $ticket;

                // Si el ticket esta asignado a otro assessor
                }else{ $assigned_tickets[] = $ticket; }

            // Si el ultimo post es de un assessor
            }else {    $answered_tickets[] = $ticket; }
        }

        //array con todos los tickets fitrados y ordenados (accesible, assigned, answered)
        if ($return == 'all') {
            foreach ($accesible_tickets as $accesible) { $all_tickets[] = $accesible; }
            foreach ($assigned_tickets as $assigned)   { $all_tickets[] = $assigned;  }
            foreach ($answered_tickets as $answered)   { $all_tickets[] = $answered;  }
            return $all_tickets;
        }
        else {
            if ($return == 'accesible') {  return $accesible_tickets; } //array con los tickets pendientes de respuesta
            else {
                if ($return == 'answered') { return $answered_tickets; } //array con los tickets respondidos
                else {
                    if($return == 'assigned') { return $assigned_tickets; } //array con los tickets asignados a un assessor
                }
            }
        }
    }

    public function findAllByOwner ($user, $status)
    {
        $tickets = $this->findBy(array('owner' => $user->getId(),
                                       'status' => $status->getId()));
        return $tickets;
    }

    public function findAllByWorkshop ($user, $status)
    {
        $tickets = $this->findBy(array('workshop' => $user->getWorkshop()->getId(),
                                       'status' => $status->getId()));
        return $tickets;
    }

    public function findTicketsFiltered($security, $request)
    {
        $em = $this->getEntityManager();

        //Inicializa variables
        $query  = 'SELECT t FROM TicketBundle:Ticket t ';
        $joins  = 'JOIN t.workshop w ';
        $where  = 'WHERE t.id != 0 ';

        //Comprueba que los filtros no esten vacios y setea la variable para la consulta
        $consulta = $this->GetQuery($em, $security, $request, $query, $joins, $where);

        return $consulta->getResult();
    }

    public function findTickets($security)
    {
        $em = $this->getEntityManager();

        if ($security->isGranted('ROLE_ASSESSOR'))
        {
            $consulta = $em->createQuery('
                SELECT t FROM TicketBundle:Ticket t
                WHERE t.status = :status
            ');

        }else{

            $consulta = $em->createQuery('
                SELECT t FROM TicketBundle:Ticket t
                WHERE t.status = :status
                AND t.workshop = :workshop
            ');

            $consulta->setParameter('workshop', $security->getToken()->getUser()->getWorkshop());
        }

        $consulta->setParameter('status', 0);

	return $consulta->getResult();
    }

    public static function GetQuery($em, $security, $request, $query, $joins, $where)
    {
        $params = array();

        //Filtros enviados
        $id_incidence = $request->get('id_incidence');
        $id_ticket   = $request->get('id_ticket');

        if ($id_incidence != "")
        {
            $where .= 'AND i.id = :id_incidence ';
            $params[] = array('id_incidence', $id_incidence);
        }

        if ($id_ticket != "")
        {
            $where .= 'AND t.id = :id_ticket ';
            $params[] = array('id_ticket', $id_ticket);
        }

        if ($security->isGranted("ROLE_ASSESSOR")) {

            //Filtros enviados de assessor
            $id_partner  = $request->get('id_partner');
            $id_workshop = $request->get('id_workshop');
            $id_region   = $request->get('id_region');

            if ($id_partner != "0") {

                $joins .= 'JOIN w.partner p ';
                $where .= 'AND p.id = :id_partner ';
                $params[] = array('id_partner', $id_partner);
            }

            if ($id_workshop != "")
            {
                $where .= 'AND w.id = :id_workshop ';
                $params[] = array('id_workshop', $id_workshop);
            }

            if ($id_region != "0") {

                $joins .= 'JOIN w.region r ';
                $where .= 'AND r.id = :id_region ';
                $params[] = array('id_region', $id_region);
            }
        }else{
            //Filtros enviados de user
            $id_workshop = $security->getToken()->getUser()->getWorkshop()->getId();

            $where .= 'AND w.id = :id_workshop ';
            $params[] = array('id_workshop', $id_workshop);
        }

        //Crea la consulta
        $consulta = $em->createQuery($query.$joins.$where);

        //hace un recorrido de $params para extraer los parametros de la consulta
        foreach($params as $param){
            $consulta->setParameter($param[0], $param[1]);
        }

        return $consulta;
    }
}
